datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean   @default(false)
  
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  introUrl String?        @db.Text
  muxData  MuxDataCourse?

  teacherId String
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // topics Topic[]

  chapters    Chapter[]
  purchases   Purchase[]
  attachments Attachment[]
  socials     Socials[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([teacherId])
  @@fulltext([title])
}

model Socials {
  id       String  @id @default(uuid())
  name     String
  link     String
  position Int
  isLocked Boolean @default(true)

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  socialsTypeId String
  socialsType   SocialsType @relation(fields: [socialsTypeId], references: [id])

  @@index([courseId])
  @@index([socialsTypeId, name])
}

model SocialsType {
  id      String    @id @default(uuid())
  name    String
  Socials Socials[]
}

model Teacher {
  id       String  @id @default(uuid())
  userId   String  @unique
  name     String  @db.Text
  email    String
  phone    String?
  image    String?
  isActive Boolean @default(false)

  courses Course[]
}

model Admin {
  id            String  @id @default(uuid())
  name          String
  email         String
  phoneNumber   String
  coverImageUrl String? @db.Text
  discordId     String? @db.Text
  teacherId     String?

  higherAdmin Boolean @default(false)
}

model Category {
  id                 String               @id @default(uuid())
  name               String               @unique
  courses            Course[]
  categoryPreference CategoryPreference[]
}

model CategoryPreference {
  id     String @id @default(uuid())
  userId String

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@index([categoryId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId])
}

model MuxDataCourse {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
